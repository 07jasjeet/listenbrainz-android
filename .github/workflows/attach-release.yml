name: Build & Publish Release APK

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  Gradle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
      - name: Configure Keystore
        run: |
          echo "$ANDROID_KEYSTORE_FILE" | base64 --decode > app/keystore.jks
          echo "storeFile=keystore.jks" >> keystore.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> keystore.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> keystore.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> keystore.properties
          echo "sentryDsn=$SENTRY_DSN" >> keystore.properties
          echo "youtubeApiKey=$YOUTUBE_API_KEY" >> keystore.properties
          echo "spotifyClientId=$SPOTIFY_CLIENT_ID" >> keystore.properties
        env:
          ANDROID_KEYSTORE_FILE: ${{ secrets.ANDROID_KEYSTORE_FILE }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build Release APK
        run: ./gradlew assembleRelease
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: ListenBrainz
          path: app/build/outputs/apk/release/app-release.apk
        if: endsWith(github.ref, '/tags/v')
      - name: Attach APK to Release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { data } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1,
            });
            const release = data[0];
            const stats = fs.statSync('app/build/outputs/apk/release/app-release.apk');
            const fileSizeInBytes = stats.size;
            const { data: asset } = await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'app-release.apk',
              data: fs.readFileSync('app/build/outputs/apk/release/app-release.apk'),
              headers: {
                'content-type': 'application/vnd.android.package-archive',
                'content-length': fileSizeInBytes,
              },
            });
            console.log(`Attached APK to release: ${asset.browser_download_url}`);
